name: Build Complete Godot Bundle (Templates + Editor + DragonBones)

on:
  workflow_dispatch:
    inputs:
      godot_version:
        description: 'Godot version to build'
        required: true
        default: '4.5.1'
      dragonbones_version:
        description: 'DragonBones plugin version'
        required: true
        default: '2.0.2'
  push:
    branches: [main, develop]
    paths:
      - '.github/workflows/**'
      - 'build-config/**'

env:
  GODOT_VERSION: ${{ github.event.inputs.godot_version || '4.5.1' }}
  GODOT_TAG: ${{ github.event.inputs.godot_version || '4.5.1' }}-stable
  DRAGONBONES_VERSION: ${{ github.event.inputs.dragonbones_version || '2.0.2' }}
  SCONSFLAGS: "verbose=yes warnings=no progress=no"

jobs:
  #############################################
  # Job 1: Build Godot Editor (Windows)
  #############################################
  build-godot-editor-windows:
    runs-on: windows-latest
    name: Build Godot Editor (Windows x64)
    
    steps:
      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install SCons
        run: |
          python -m pip install scons
          scons --version

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Clone Godot Engine
        uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TAG }}
          path: godot

      - name: Compile Godot Editor (Optimized)
        working-directory: godot
        run: |
          scons platform=windows `
            target=editor `
            optimize=speed `
            use_lto=yes `
            debug_symbols=no `
            production=yes `
            deprecated=no

      - name: Upload Editor Artifact
        uses: actions/upload-artifact@v4
        with:
          name: godot-editor-windows
          path: godot/bin/godot.windows.editor.x86_64.exe
          retention-days: 90

  #############################################
  # Job 2: Build Export Templates - Windows
  #############################################
  build-templates-windows:
    runs-on: windows-latest
    name: Build Windows Export Templates
    
    steps:
      - name: Set up Python + SCons
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - run: python -m pip install scons

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Clone Godot
        uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TAG }}
          path: godot

      - name: Compile Windows Template (Release)
        working-directory: godot
        run: |
          scons platform=windows `
            target=template_release `
            optimize=size_extra `
            lto=full `
            debug_symbols=no `
            deprecated=no `
            disable_3d=yes `
            production=yes

      - name: Compile Windows Template (Debug)
        working-directory: godot
        run: |
          scons platform=windows `
            target=template_debug `
            optimize=size `
            debug_symbols=yes `
            deprecated=no `
            disable_3d=yes

      - name: Upload Windows Templates
        uses: actions/upload-artifact@v4
        with:
          name: godot-templates-windows
          path: godot/bin/godot.windows.template_*.exe
          retention-days: 90

  #############################################
  # Job 3: Build Export Templates - Linux
  #############################################
  build-templates-linux:
    runs-on: ubuntu-latest
    name: Build Linux Export Templates
    
    steps:
      - name: Set up Python + SCons
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - run: |
          python -m pip install scons
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libx11-dev libxcursor-dev \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev \
            libudev-dev libxi-dev libxrandr-dev

      - name: Clone Godot
        uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TAG }}
          path: godot

      - name: Compile Linux Template (Release)
        working-directory: godot
        run: |
          scons platform=linuxbsd \
            target=template_release \
            optimize=size_extra \
            lto=full \
            debug_symbols=no \
            deprecated=no \
            disable_3d=yes \
            production=yes

      - name: Compile Linux Template (Debug)
        working-directory: godot
        run: |
          scons platform=linuxbsd \
            target=template_debug \
            optimize=size \
            debug_symbols=yes \
            deprecated=no \
            disable_3d=yes

      - name: Upload Linux Templates
        uses: actions/upload-artifact@v4
        with:
          name: godot-templates-linux
          path: godot/bin/godot.linuxbsd.template_*
          retention-days: 90

  #############################################
  # Job 4: Build Export Templates - Web
  #############################################
  build-templates-web:
    runs-on: ubuntu-latest
    name: Build Web Export Templates
    
    steps:
      - name: Set up Python + SCons
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - run: python -m pip install scons

      - name: Install Emscripten SDK
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: '3.1.39'
          actions-cache-folder: 'emsdk-cache'

      - name: Clone Godot
        uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TAG }}
          path: godot

      - name: Compile Web Template (Release)
        working-directory: godot
        run: |
          scons platform=web \
            target=template_release \
            optimize=size_extra \
            lto=full \
            debug_symbols=no \
            deprecated=no \
            disable_3d=yes \
            production=yes

      - name: Compile Web Template (Debug)
        working-directory: godot
        run: |
          scons platform=web \
            target=template_debug \
            optimize=size \
            debug_symbols=yes \
            deprecated=no \
            disable_3d=yes

      - name: Upload Web Templates
        uses: actions/upload-artifact@v4
        with:
          name: godot-templates-web
          path: godot/bin/godot.web.template_*
          retention-days: 90

  #############################################
  # Job 5: Build Export Templates - Android
  #############################################
  build-templates-android:
    runs-on: ubuntu-latest
    name: Build Android Export Templates
    
    steps:
      - name: Set up Python + SCons
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - run: python -m pip install scons

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Android SDK/NDK
        run: |
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip -d android-sdk
          yes | android-sdk/cmdline-tools/bin/sdkmanager --sdk_root=$HOME/android-sdk --licenses
          android-sdk/cmdline-tools/bin/sdkmanager --sdk_root=$HOME/android-sdk "ndk;23.2.8568313" "cmake;3.22.1" "build-tools;33.0.1" "platforms;android-33"
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$HOME/android-sdk/ndk/23.2.8568313" >> $GITHUB_ENV

      - name: Clone Godot
        uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TAG }}
          path: godot

      - name: Compile Android Template (Release)
        working-directory: godot
        run: |
          scons platform=android \
            target=template_release \
            arch=arm64v8 \
            optimize=size_extra \
            lto=thin \
            debug_symbols=no \
            deprecated=no \
            disable_3d=yes \
            production=yes

      - name: Compile Android Template (Debug)
        working-directory: godot
        run: |
          scons platform=android \
            target=template_debug \
            arch=arm64v8 \
            optimize=size \
            debug_symbols=yes \
            deprecated=no \
            disable_3d=yes

      - name: Build Android APK
        working-directory: godot/platform/android/java
        run: |
          ./gradlew generateGodotTemplates

      - name: Upload Android Templates
        uses: actions/upload-artifact@v4
        with:
          name: godot-templates-android
          path: |
            godot/bin/android_*.apk
            godot/bin/godot.android.template_*
          retention-days: 90

  #############################################
  # Job 6: Build DragonBones Plugin (All Platforms)
  #############################################
  build-dragonbones-plugin:
    runs-on: ${{ matrix.os }}
    name: Build DragonBones Plugin (${{ matrix.platform }})
    strategy:
      matrix:
        include:
          - platform: windows
            os: windows-latest
            scons_platform: windows
          - platform: linux
            os: ubuntu-latest
            scons_platform: linuxbsd
          - platform: web
            os: ubuntu-latest
            scons_platform: web
          - platform: android
            os: ubuntu-latest
            scons_platform: android
    
    steps:
      - name: Set up Python + SCons
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - run: python -m pip install scons

      - name: Set up MSVC (Windows only)
        if: matrix.platform == 'windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libx11-dev libxcursor-dev \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev

      - name: Install Emscripten (Web only)
        if: matrix.platform == 'web'
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: '3.1.39'

      - name: Install Android NDK (Android only)
        if: matrix.platform == 'android'
        run: |
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip -d android-sdk
          yes | android-sdk/cmdline-tools/bin/sdkmanager --sdk_root=$HOME/android-sdk --licenses
          android-sdk/cmdline-tools/bin/sdkmanager --sdk_root=$HOME/android-sdk "ndk;23.2.8568313"
          echo "ANDROID_NDK_ROOT=$HOME/android-sdk/ndk/23.2.8568313" >> $GITHUB_ENV

      - name: Clone DragonBones Plugin
        uses: actions/checkout@v4
        with:
          repository: Daylily-Zeleen/Godot-DragonBones
          ref: v${{ env.DRAGONBONES_VERSION }}
          submodules: recursive
          path: dragonbones

      - name: Update godot-cpp to match Godot version
        working-directory: dragonbones/godot-cpp
        run: |
          git fetch --tags
          git checkout ${{ env.GODOT_TAG }}

      - name: Compile DragonBones Plugin
        working-directory: dragonbones
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" == "android" ]; then
            scons platform=${{ matrix.scons_platform }} \
              target=template_release \
              arch=arm64v8 \
              optimize=size \
              lto=thin \
              debug_symbols=no
          else
            scons platform=${{ matrix.scons_platform }} \
              target=template_release \
              optimize=size \
              lto=thin \
              debug_symbols=no
          fi

      - name: Upload DragonBones Plugin
        uses: actions/upload-artifact@v4
        with:
          name: dragonbones-plugin-${{ matrix.platform }}
          path: dragonbones/demo/addons/godot_dragon_bones.daylily-zeleen/
          retention-days: 90

  #############################################
  # Job 7: Package Everything Into Release
  #############################################
  package-release:
    runs-on: ubuntu-latest
    needs: 
      - build-godot-editor-windows
      - build-templates-windows
      - build-templates-linux
      - build-templates-web
      - build-templates-android
      - build-dragonbones-plugin
    name: Package Complete Release Bundle
    
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Export Template Structure
        run: |
          mkdir -p export_templates/${{ env.GODOT_VERSION }}.stable
          
          # Copy all templates
          cp artifacts/godot-templates-windows/* export_templates/${{ env.GODOT_VERSION }}.stable/ || true
          cp artifacts/godot-templates-linux/* export_templates/${{ env.GODOT_VERSION }}.stable/ || true
          cp artifacts/godot-templates-web/* export_templates/${{ env.GODOT_VERSION }}.stable/ || true
          cp artifacts/godot-templates-android/* export_templates/${{ env.GODOT_VERSION }}.stable/ || true

      - name: Package Godot Editor
        run: |
          cd artifacts/godot-editor-windows
          zip -r ../../godot-editor-windows-${{ env.GODOT_VERSION }}-custom.zip .
          cd ../..

      - name: Package Export Templates
        run: |
          cd export_templates
          zip -r ../godot-export-templates-${{ env.GODOT_VERSION }}-custom.zip .
          cd ..

      - name: Package DragonBones Plugin
        run: |
          mkdir -p dragonbones-complete/addons
          
          # Merge all platform binaries
          cp -r artifacts/dragonbones-plugin-windows/* dragonbones-complete/addons/ || true
          cp -r artifacts/dragonbones-plugin-linux/* dragonbones-complete/addons/ || true
          cp -r artifacts/dragonbones-plugin-web/* dragonbones-complete/addons/ || true
          cp -r artifacts/dragonbones-plugin-android/* dragonbones-complete/addons/ || true
          
          cd dragonbones-complete
          zip -r ../dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}-all-platforms.zip .
          cd ..

      - name: Create Release Notes
        run: |
          cat > RELEASE_NOTES.md << 'EOF'
          # Complete Godot Build Bundle
          
          ## Versions
          - **Godot:** ${{ env.GODOT_VERSION }}
          - **DragonBones Plugin:** ${{ env.DRAGONBONES_VERSION }}
          - **Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## What's Included
          
          ### Godot Editor (Windows)
          - Optimized for speed
          - Production build
          - File: `godot-editor-windows-${{ env.GODOT_VERSION }}-custom.zip`
          
          ### Export Templates (All Platforms)
          - **Windows** (x86_64): Release + Debug
          - **Linux** (x86_64): Release + Debug
          - **Web** (WASM): Release + Debug
          - **Android** (ARM64): Release + Debug
          - File: `godot-export-templates-${{ env.GODOT_VERSION }}-custom.zip`
          
          ### DragonBones Plugin (All Platforms)
          - Windows, Linux, Web, Android binaries included
          - Compatible with Godot ${{ env.GODOT_VERSION }}
          - File: `dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}-all-platforms.zip`
          
          ## Optimizations Applied
          - `optimize=size_extra` (templates)
          - `lto=full` (Link Time Optimization)
          - 3D features disabled (2D-only game)
          - Deprecated features removed
          
          ## Installation
          
          ### Godot Editor
          1. Extract `godot-editor-windows-*.zip`
          2. Run `godot.windows.editor.x86_64.exe`
          
          ### Export Templates
          1. Extract to: `%APPDATA%/Godot/export_templates/${{ env.GODOT_VERSION }}.stable/`
          2. Restart Godot Editor
          
          ### DragonBones Plugin
          1. Extract to your project: `your-game/addons/`
          2. Enable in Project Settings → Plugins
          
          ## Build Info
          - Commit: ${{ github.sha }}
          - Workflow: ${{ github.workflow }}
          - Run: ${{ github.run_number }}
          EOF

      - name: Upload Final Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: complete-release-bundle
          path: |
            godot-editor-windows-${{ env.GODOT_VERSION }}-custom.zip
            godot-export-templates-${{ env.GODOT_VERSION }}-custom.zip
            dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}-all-platforms.zip
            RELEASE_NOTES.md
          retention-days: 90

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.GODOT_VERSION }}-db${{ env.DRAGONBONES_VERSION }}-${{ github.run_number }}
          name: "Godot ${{ env.GODOT_VERSION }} Complete Bundle"
          body_path: RELEASE_NOTES.md
          files: |
            godot-editor-windows-${{ env.GODOT_VERSION }}-custom.zip
            godot-export-templates-${{ env.GODOT_VERSION }}-custom.zip
            dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}-all-platforms.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
