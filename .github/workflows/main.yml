name: Build Complete Godot Bundle (Official DragonBones Method)

on:
  workflow_dispatch:
    inputs:
      godot_version:
        description: 'Godot version'
        default: '4.5.1'
      dragonbones_version:
        description: 'DragonBones version'
        default: '2.0.2'
  push:
    branches: [main]

env:
  GODOT_VERSION: ${{ github.event.inputs.godot_version || '4.5.1' }}
  GODOT_TAG: ${{ github.event.inputs.godot_version || '4.5.1' }}-stable
  DRAGONBONES_VERSION: ${{ github.event.inputs.dragonbones_version || '2.0.2' }}

jobs:
  #############################################
  # Godot Editor (Windows)
  #############################################
  build-godot-editor:
    runs-on: windows-latest
    name: Godot Editor (Windows)
    steps:
      - uses: actions/setup-python@v5
        with: {python-version: '3.x'}
      - run: python -m pip install scons
      - uses: ilammy/msvc-dev-cmd@v1
      
      - uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TAG }}
          path: godot

      - working-directory: godot
        run: |
          scons platform=windows target=editor `
            optimize=speed use_lto=yes debug_symbols=no production=yes

      - uses: actions/upload-artifact@v4
        with:
          name: godot-editor-windows
          path: godot/bin/godot.windows.editor.x86_64.exe

  #############################################
  # Godot Templates (Parallel Build)
  #############################################
  build-godot-templates:
    runs-on: ${{ matrix.os }}
    name: Godot ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - {name: 'Windows', os: windows-latest, platform: windows, arch: x86_64}
          - {name: 'Linux', os: ubuntu-latest, platform: linuxbsd, arch: x86_64}
          - {name: 'Web', os: ubuntu-latest, platform: web, arch: wasm32}
          - {name: 'Android', os: ubuntu-latest, platform: android, arch: arm64v8}
    
    steps:
      - uses: actions/setup-python@v5
        with: {python-version: '3.x'}
      - run: python -m pip install scons

      # Windows
      - if: matrix.platform == 'windows'
        uses: ilammy/msvc-dev-cmd@v1

      # Linux
      - if: matrix.platform == 'linuxbsd'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libx11-dev \
            libxcursor-dev libxinerama-dev libgl1-mesa-dev libglu-dev \
            libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev

      # Web
      - if: matrix.platform == 'web'
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: '4.0.0'  # Updated version

      # Android
      - if: matrix.platform == 'android'
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r23c
          link-to-sdk: true

      - uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TAG }}
          path: godot

      # Build Release
      - name: Build Release Template
        working-directory: godot
        shell: bash
        run: |
          EXTRA_ARGS=""
          if [ "${{ matrix.platform }}" == "android" ]; then
            EXTRA_ARGS="swappy=no"
          fi
          
          scons platform=${{ matrix.platform }} target=template_release \
            arch=${{ matrix.arch }} optimize=size_extra lto=full \
            debug_symbols=no deprecated=no disable_3d=yes \
            production=yes $EXTRA_ARGS

      # Build Debug
      - name: Build Debug Template
        working-directory: godot
        shell: bash
        run: |
          EXTRA_ARGS=""
          if [ "${{ matrix.platform }}" == "android" ]; then
            EXTRA_ARGS="swappy=no"
          fi
          
          scons platform=${{ matrix.platform }} target=template_debug \
            arch=${{ matrix.arch }} optimize=size debug_symbols=yes \
            deprecated=no disable_3d=yes $EXTRA_ARGS

      # Android APK
      - if: matrix.platform == 'android'
        working-directory: godot/platform/android/java
        run: ./gradlew generateGodotTemplates

      - uses: actions/upload-artifact@v4
        with:
          name: godot-templates-${{ matrix.platform }}
          path: godot/bin/*

  #############################################
  # DragonBones Plugin (Official Method)
  #############################################
  build-dragonbones-plugin:
    runs-on: ${{ matrix.os }}
    name: DragonBones ${{ matrix.name }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - {name: 'Windows x64', os: windows-latest, platform: windows, arch: x86_64, target: template_release}
          - {name: 'Linux x64', os: ubuntu-latest, platform: linux, arch: x86_64, target: template_release}
          - {name: 'Web', os: ubuntu-latest, platform: web, arch: wasm32, target: template_release}
          - {name: 'Android ARM64', os: ubuntu-latest, platform: android, arch: arm64, target: template_release}
    
    steps:
      - uses: actions/setup-python@v5
        with: {python-version: '3.x'}
      
      - name: Setup SCons
        run: |
          python -m pip install scons==4.4
          scons --version

      # Windows
      - if: matrix.platform == 'windows'
        uses: e-t-l/setup-mingw@patch-1

      # Linux
      - if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config

      # Android
      - if: matrix.platform == 'android'
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r23c
          link-to-sdk: true

      # Web (matching official)
      - if: matrix.platform == 'web'
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: '4.0.0'

      - uses: actions/checkout@v4
        with:
          repository: Daylily-Zeleen/Godot-DragonBones
          ref: v${{ env.DRAGONBONES_VERSION }}
          submodules: recursive
          path: dragonbones

      - name: Update godot-cpp
        working-directory: dragonbones/godot-cpp
        shell: bash
        run: |
          git fetch --tags
          git checkout ${{ env.GODOT_TAG }} || echo "Using default branch"

      # Official build command
      - name: Compile Plugin
        working-directory: dragonbones
        shell: bash
        run: |
          scons target='${{ matrix.target }}' \
            platform='${{ matrix.platform }}' \
            arch='${{ matrix.arch }}' \
            debug_symbols=no

      - uses: actions/upload-artifact@v4
        with:
          name: dragonbones-${{ matrix.platform }}-${{ matrix.arch }}
          path: dragonbones/demo/addons/godot_dragon_bones.daylily-zeleen/
          if-no-files-found: warn

  #############################################
  # Package Everything
  #############################################
  package-release:
    runs-on: ubuntu-latest
    needs: [build-godot-editor, build-godot-templates, build-dragonbones-plugin]
    if: always()
    name: Package Complete Bundle
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Template Structure
        run: |
          mkdir -p export_templates/${{ env.GODOT_VERSION }}.stable
          
          # Copy all template files
          find artifacts/godot-templates-* -type f 2>/dev/null | while read file; do
            cp "$file" export_templates/${{ env.GODOT_VERSION }}.stable/ 2>/dev/null || true
          done

      - name: Package Editor
        run: |
          cd artifacts/godot-editor-windows
          zip -r ../../godot-editor-${{ env.GODOT_VERSION }}.zip .

      - name: Package Templates
        run: |
          cd export_templates
          zip -r ../godot-templates-${{ env.GODOT_VERSION }}.zip .

      - name: Merge DragonBones Plugin
        run: |
          mkdir -p dragonbones-merged/addons
          
          # Merge all platform binaries
          find artifacts/dragonbones-* -type d -name "godot_dragon_bones.daylily-zeleen" 2>/dev/null | while read dir; do
            cp -r "$dir"/* dragonbones-merged/addons/ 2>/dev/null || true
          done
          
          cd dragonbones-merged
          zip -r ../dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}.zip .

      - name: Generate Checksums
        run: sha256sum *.zip > checksums.txt

      - name: Create Release Notes
        run: |
          cat > RELEASE_NOTES.md << 'EOF'
          # Godot ${{ env.GODOT_VERSION }} Complete Bundle
          
          **Build Date:** $(date -u +"%Y-%m-%d %H:%M UTC")
          
          ## Files
          - `godot-editor-${{ env.GODOT_VERSION }}.zip` - Windows Editor
          - `godot-templates-${{ env.GODOT_VERSION }}.zip` - All Templates
          - `dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}.zip` - Plugin
          
          ## Platforms
          - Windows x64 (Release + Debug)
          - Linux x64 (Release + Debug)
          - Web WASM (Release + Debug)
          - Android ARM64 (Release + Debug)
          
          ## Installation
          
          ### Editor
          ```
          unzip godot-editor-${{ env.GODOT_VERSION }}.zip
          ```
          
          ### Templates
          ```
          # Windows
          unzip godot-templates-${{ env.GODOT_VERSION }}.zip -d %APPDATA%Godotexport_templates${{ env.GODOT_VERSION }}.stable\
          
          # Linux
          unzip godot-templates-${{ env.GODOT_VERSION }}.zip -d ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/
          ```
          
          ### DragonBones
          ```
          unzip dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}.zip -d your-game/
          ```
          
          ## Checksums
          ```
          $(cat checksums.txt)
          ```
          EOF

      - uses: actions/upload-artifact@v4
        with:
          name: complete-bundle
          path: |
            godot-editor-${{ env.GODOT_VERSION }}.zip
            godot-templates-${{ env.GODOT_VERSION }}.zip
            dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}.zip
            checksums.txt
            RELEASE_NOTES.md

      - if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.GODOT_VERSION }}-build${{ github.run_number }}
          name: Godot ${{ env.GODOT_VERSION }} Complete
          body_path: RELEASE_NOTES.md
          files: |
            godot-editor-${{ env.GODOT_VERSION }}.zip
            godot-templates-${{ env.GODOT_VERSION }}.zip
            dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}.zip
            checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
