name: Build Godot Bundle (Production Ready)

on:
  workflow_dispatch:
    inputs:
      godot_version:
        default: '4.5.1'
      dragonbones_version:
        default: '2.0.2'

env:
  GODOT_VERSION: ${{ github.event.inputs.godot_version || '4.5.1' }}
  GODOT_TAG: ${{ github.event.inputs.godot_version || '4.5.1' }}-stable
  DRAGONBONES_VERSION: ${{ github.event.inputs.dragonbones_version || '2.0.2' }}

jobs:
  #############################################
  # Godot Editor
  #############################################
  build-godot-editor:
    runs-on: windows-latest
    name: Editor
    steps:
      - uses: actions/setup-python@v5
        with: {python-version: '3.x'}
      - run: python -m pip install scons
      - uses: ilammy/msvc-dev-cmd@v1
      
      - uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TAG }}
          path: godot

      - working-directory: godot
        run: |
          scons platform=windows target=editor `
            optimize=speed use_lto=yes debug_symbols=no production=yes

      - uses: actions/upload-artifact@v4
        with:
          name: godot-editor-windows
          path: godot/bin/godot.windows.editor.x86_64.exe

  #############################################
  # Templates (Platform-specific LTO)
  #############################################
  build-godot-templates:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - {name: 'Windows', os: windows-latest, platform: windows}
          - {name: 'Linux', os: ubuntu-latest, platform: linuxbsd}
          - {name: 'Web', os: ubuntu-latest, platform: web}
          - {name: 'Android', os: ubuntu-latest, platform: android}
    
    steps:
      - uses: actions/setup-python@v5
        with: {python-version: '3.x'}
      - run: python -m pip install scons

      - if: matrix.platform == 'windows'
        uses: ilammy/msvc-dev-cmd@v1

      - if: matrix.platform == 'linuxbsd'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libx11-dev \
            libxcursor-dev libxinerama-dev libgl1-mesa-dev libglu-dev \
            libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev

      - if: matrix.platform == 'web'
        uses: mymindstorm/setup-emsdk@v14
        with: {version: '4.0.0'}

      - if: matrix.platform == 'android'
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r23c
          link-to-sdk: true

      - uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TAG }}
          path: godot

      # RELEASE BUILD
      - name: Build Release Template
        working-directory: godot
        shell: bash
        run: |
          ARCH="x86_64"
          LTO_FLAG="lto=full"
          EXTRA_ARGS=""
          
          # Platform-specific settings
          if [ "${{ matrix.platform }}" == "windows" ]; then
            # MSVC: use lto=full (not thin)
            LTO_FLAG="use_lto=yes"
          
          elif [ "${{ matrix.platform }}" == "linuxbsd" ]; then
            # GCC: use lto=full
            LTO_FLAG="lto=full"
          
          elif [ "${{ matrix.platform }}" == "web" ]; then
            # Emscripten: lto supported
            ARCH="wasm32"
            LTO_FLAG="lto=full"
          
          elif [ "${{ matrix.platform }}" == "android" ]; then
            # Clang: use lto=thin
            ARCH="arm64v8"
            LTO_FLAG="lto=thin"
            EXTRA_ARGS="swappy=no"
          fi
          
          scons platform=${{ matrix.platform }} \
            target=template_release \
            arch=$ARCH \
            optimize=size \
            $LTO_FLAG \
            debug_symbols=no \
            deprecated=no \
            disable_3d=yes \
            production=yes \
            $EXTRA_ARGS

      # DEBUG BUILD
      - name: Build Debug Template
        working-directory: godot
        shell: bash
        run: |
          ARCH="x86_64"
          EXTRA_ARGS=""
          
          if [ "${{ matrix.platform }}" == "android" ]; then
            ARCH="arm64v8"
            EXTRA_ARGS="swappy=no"
          elif [ "${{ matrix.platform }}" == "web" ]; then
            ARCH="wasm32"
          fi
          
          scons platform=${{ matrix.platform }} \
            target=template_debug \
            arch=$ARCH \
            optimize=debug \
            debug_symbols=no \
            deprecated=no \
            disable_3d=yes \
            $EXTRA_ARGS

      - if: matrix.platform == 'android'
        working-directory: godot/platform/android/java
        run: ./gradlew generateGodotTemplates

      # Extract ONLY binaries
      - name: Prepare Binaries
        shell: bash
        run: |
          mkdir -p final_binaries
          cd godot/bin
          
          echo "=== Build artifacts in bin/ ==="
          ls -lh
          
          # Copy only executables/libraries
          if [ "${{ matrix.platform }}" == "windows" ]; then
            cp -v godot.windows.template_release.*.exe ../../final_binaries/ 2>/dev/null || true
            cp -v godot.windows.template_debug.*.exe ../../final_binaries/ 2>/dev/null || true
          
          elif [ "${{ matrix.platform }}" == "linuxbsd" ]; then
            cp -v godot.linuxbsd.template_release.* ../../final_binaries/ 2>/dev/null || true
            cp -v godot.linuxbsd.template_debug.* ../../final_binaries/ 2>/dev/null || true
          
          elif [ "${{ matrix.platform }}" == "web" ]; then
            cp -v godot.web.template_release.*.wasm ../../final_binaries/ 2>/dev/null || true
            cp -v godot.web.template_release.*.js ../../final_binaries/ 2>/dev/null || true
            cp -v godot.web.template_debug.*.wasm ../../final_binaries/ 2>/dev/null || true
            cp -v godot.web.template_debug.*.js ../../final_binaries/ 2>/dev/null || true
          
          elif [ "${{ matrix.platform }}" == "android" ]; then
            cp -v android_*.apk ../../final_binaries/ 2>/dev/null || true
            cp -v godot.android.template_*.so ../../final_binaries/ 2>/dev/null || true
          fi
          
          cd ../../
          echo "=== Final binaries ==="
          ls -lh final_binaries/
          du -sh final_binaries/

      - uses: actions/upload-artifact@v4
        with:
          name: godot-templates-${{ matrix.platform }}
          path: final_binaries/*

  #############################################
  # DragonBones Plugin
  #############################################
  build-dragonbones-plugin:
    runs-on: ${{ matrix.os }}
    name: DB-${{ matrix.platform }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - {platform: windows, os: windows-latest, arch: x86_64}
          - {platform: linux, os: ubuntu-latest, arch: x86_64}
          - {platform: web, os: ubuntu-latest, arch: wasm32}
          - {platform: android, os: ubuntu-latest, arch: arm64}
    
    steps:
      - uses: actions/setup-python@v5
        with: {python-version: '3.x'}
      - run: python -m pip install scons==4.4

      - if: matrix.platform == 'windows'
        uses: e-t-l/setup-mingw@patch-1

      - if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config

      - if: matrix.platform == 'android'
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r23c
          link-to-sdk: true

      - if: matrix.platform == 'web'
        uses: mymindstorm/setup-emsdk@v14
        with: {version: '4.0.0'}

      - uses: actions/checkout@v4
        with:
          repository: Daylily-Zeleen/Godot-DragonBones
          ref: v${{ env.DRAGONBONES_VERSION }}
          submodules: recursive
          path: dragonbones

      - working-directory: dragonbones/godot-cpp
        shell: bash
        run: |
          git fetch --tags
          git checkout ${{ env.GODOT_TAG }} || echo "Using default"

      - working-directory: dragonbones
        shell: bash
        run: |
          scons target=template_release \
            platform=${{ matrix.platform }} \
            arch=${{ matrix.arch }} \
            debug_symbols=no

      - uses: actions/upload-artifact@v4
        with:
          name: dragonbones-${{ matrix.platform }}
          path: dragonbones/demo/addons/godot_dragon_bones.daylily-zeleen/
          if-no-files-found: warn

  #############################################
  # Package Everything
  #############################################
  package-release:
    runs-on: ubuntu-latest
    needs: [build-godot-editor, build-godot-templates, build-dragonbones-plugin]
    if: always()
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Verify Artifact Sizes
        run: |
          echo "=== Downloaded Artifacts ==="
          du -sh artifacts/*
          echo ""
          echo "=== Expected: ~100-150 MB total ==="

      - name: Create Template Structure
        run: |
          mkdir -p export_templates/${{ env.GODOT_VERSION }}.stable
          find artifacts/godot-templates-* -type f -exec cp -v {} export_templates/${{ env.GODOT_VERSION }}.stable/ \;
          
          echo "=== Template Contents ==="
          ls -lh export_templates/${{ env.GODOT_VERSION }}.stable/

      - name: Package Editor
        run: |
          cd artifacts/godot-editor-windows
          zip -9 ../../godot-editor-${{ env.GODOT_VERSION }}.zip *
          cd ../..

      - name: Package Templates
        run: |
          cd export_templates
          zip -9 -r ../godot-templates-${{ env.GODOT_VERSION }}.zip .
          cd ..

      - name: Package DragonBones
        run: |
          mkdir -p dragonbones-merged/addons
          find artifacts/dragonbones-* -type d -name "godot_dragon_bones.daylily-zeleen" -exec cp -r {}/* dragonbones-merged/addons/ \; 2>/dev/null || true
          cd dragonbones-merged
          zip -9 -r ../dragonbones-${{ env.DRAGONBONES_VERSION }}.zip .
          cd ..

      - name: Show Final Sizes
        run: |
          echo "=== FINAL PACKAGE SIZES ==="
          ls -lh *.zip

      - name: Generate Checksums
        run: sha256sum *.zip > checksums.txt

      - name: Create Release Notes
        run: |
          cat > RELEASE_NOTES.md << 'EOF'
          # Godot ${{ env.GODOT_VERSION }} Complete Bundle
          
          **Build:** $(date -u +"%Y-%m-%d %H:%M UTC")
          
          ## 📦 Packages
          - Editor: ~70 MB
          - Templates: ~100-150 MB (all platforms)
          - DragonBones: ~2 MB
          
          ## 🎮 Platforms
          - Windows x64 (Release + Debug)
          - Linux x64 (Release + Debug)
          - Web WASM (Release + Debug)
          - Android ARM64 (Release + Debug)
          
          ## ⚡ Optimizations
          - Size-optimized builds
          - Platform-appropriate LTO
          - 3D disabled (2D only)
          - Debug symbols stripped
          
          ## 📥 Installation
          
          **Editor:**
          ```
          unzip godot-editor-${{ env.GODOT_VERSION }}.zip
          ```
          
          **Templates (Windows):**
          ```
          unzip godot-templates-${{ env.GODOT_VERSION }}.zip -d %APPDATA%\Godot\export_templates\${{ env.GODOT_VERSION }}.stable\
          ```
          
          **Templates (Linux):**
          ```
          unzip godot-templates-${{ env.GODOT_VERSION }}.zip -d ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/
          ```
          
          **DragonBones:**
          ```
          cd your-game
          unzip dragonbones-${{ env.DRAGONBONES_VERSION }}.zip
          ```
          
          ## 🔍 Checksums
          ```
          $(cat checksums.txt)
          ```
          EOF

      - uses: actions/upload-artifact@v4
        with:
          name: complete-bundle
          path: |
            godot-editor-${{ env.GODOT_VERSION }}.zip
            godot-templates-${{ env.GODOT_VERSION }}.zip
            dragonbones-${{ env.DRAGONBONES_VERSION }}.zip
            checksums.txt
            RELEASE_NOTES.md

      - if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.GODOT_VERSION }}-build${{ github.run_number }}
          name: Godot ${{ env.GODOT_VERSION }} Complete
          body_path: RELEASE_NOTES.md
          files: |
            godot-editor-${{ env.GODOT_VERSION }}.zip
            godot-templates-${{ env.GODOT_VERSION }}.zip
            dragonbones-${{ env.DRAGONBONES_VERSION }}.zip
            checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
