name: Build Complete Godot Bundle (All Platforms + DragonBones)

on:
  workflow_dispatch:
    inputs:
      godot_version:
        description: 'Godot version'
        required: true
        default: '4.5.1'
      dragonbones_version:
        description: 'DragonBones version'
        required: true
        default: '2.0.2'
  push:
    branches: [main, develop]

env:
  GODOT_VERSION: ${{ github.event.inputs.godot_version || '4.5.1' }}
  GODOT_TAG: ${{ github.event.inputs.godot_version || '4.5.1' }}-stable
  DRAGONBONES_VERSION: ${{ github.event.inputs.dragonbones_version || '2.0.2' }}
  SCONSFLAGS: "verbose=yes warnings=no progress=no"

jobs:
  #############################################
  # Job 1: Build Godot Editor (Windows)
  #############################################
  build-godot-editor-windows:
    runs-on: windows-latest
    name: Build Godot Editor (Windows x64)
    
    steps:
      - name: Set up Python + SCons
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - run: python -m pip install scons

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Clone Godot Engine
        uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TAG }}
          path: godot

      - name: Compile Godot Editor
        working-directory: godot
        run: |
          scons platform=windows `
            target=editor `
            optimize=speed `
            use_lto=yes `
            debug_symbols=no `
            production=yes

      - name: Upload Editor
        uses: actions/upload-artifact@v4
        with:
          name: godot-editor-windows
          path: godot/bin/godot.windows.editor.x86_64.exe
          retention-days: 90

  #############################################
  # Job 2: Build Templates - Windows
  #############################################
  build-templates-windows:
    runs-on: windows-latest
    name: Windows Templates
    
    steps:
      - uses: actions/setup-python@v5
        with: {python-version: '3.x'}
      - run: python -m pip install scons
      - uses: ilammy/msvc-dev-cmd@v1

      - uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TAG }}
          path: godot

      - name: Build Release
        working-directory: godot
        run: |
          scons platform=windows target=template_release `
            optimize=size_extra lto=full debug_symbols=no `
            deprecated=no disable_3d=yes production=yes

      - name: Build Debug
        working-directory: godot
        run: |
          scons platform=windows target=template_debug `
            optimize=size debug_symbols=yes `
            deprecated=no disable_3d=yes

      - uses: actions/upload-artifact@v4
        with:
          name: godot-templates-windows
          path: godot/bin/godot.windows.template_*.exe

  #############################################
  # Job 3: Build Templates - Linux
  #############################################
  build-templates-linux:
    runs-on: ubuntu-latest
    name: Linux Templates
    
    steps:
      - uses: actions/setup-python@v5
        with: {python-version: '3.x'}
      
      - name: Install Dependencies
        run: |
          python -m pip install scons
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libx11-dev \
            libxcursor-dev libxinerama-dev libgl1-mesa-dev libglu-dev \
            libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev

      - uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TAG }}
          path: godot

      - name: Build Release
        working-directory: godot
        run: |
          scons platform=linuxbsd target=template_release \
            optimize=size_extra lto=full debug_symbols=no \
            deprecated=no disable_3d=yes production=yes

      - name: Build Debug
        working-directory: godot
        run: |
          scons platform=linuxbsd target=template_debug \
            optimize=size debug_symbols=yes \
            deprecated=no disable_3d=yes

      - uses: actions/upload-artifact@v4
        with:
          name: godot-templates-linux
          path: godot/bin/godot.linuxbsd.template_*

  #############################################
  # Job 4: Build Templates - Web (FIXED)
  #############################################
  build-templates-web:
    runs-on: ubuntu-latest
    name: Web Templates
    
    steps:
      - uses: actions/setup-python@v5
        with: {python-version: '3.x'}
      - run: python -m pip install scons

      - name: Install Emscripten 4.0.0
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: '4.0.0'
          actions-cache-folder: 'emsdk-cache'

      - name: Verify Emscripten
        run: emcc --version

      - uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TAG }}
          path: godot

      - name: Build Release
        working-directory: godot
        run: |
          scons platform=web target=template_release \
            optimize=size_extra lto=full debug_symbols=no \
            deprecated=no disable_3d=yes production=yes

      - name: Build Debug
        working-directory: godot
        run: |
          scons platform=web target=template_debug \
            optimize=size debug_symbols=yes \
            deprecated=no disable_3d=yes

      - uses: actions/upload-artifact@v4
        with:
          name: godot-templates-web
          path: godot/bin/godot.web.template_*

  #############################################
  # Job 5: Build Templates - Android (FIXED)
  #############################################
  build-templates-android:
    runs-on: ubuntu-latest
    name: Android Templates
    
    steps:
      - uses: actions/setup-python@v5
        with: {python-version: '3.x'}
      - run: python -m pip install scons

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        run: |
          export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk
          export ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/23.2.8568313
          
          # Install NDK if missing
          if [ ! -d "$ANDROID_NDK_ROOT" ]; then
            echo "Installing NDK 23.2.8568313..."
            yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager \
              "ndk;23.2.8568313" "cmake;3.22.1" "build-tools;33.0.1" "platforms;android-33" || true
          fi
          
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TAG }}
          path: godot

      - name: Build Release ARM64
        working-directory: godot
        run: |
          scons platform=android target=template_release arch=arm64v8 \
            optimize=size_extra lto=thin debug_symbols=no \
            deprecated=no disable_3d=yes production=yes swappy=no

      - name: Build Debug ARM64
        working-directory: godot
        run: |
          scons platform=android target=template_debug arch=arm64v8 \
            optimize=size debug_symbols=yes \
            deprecated=no disable_3d=yes swappy=no

      - name: Build Android APK
        working-directory: godot/platform/android/java
        run: ./gradlew generateGodotTemplates

      - uses: actions/upload-artifact@v4
        with:
          name: godot-templates-android
          path: |
            godot/bin/android_*.apk
            godot/bin/godot.android.template_*

  #############################################
  # Job 6: Build DragonBones Plugin (All Platforms)
  #############################################
  build-dragonbones-plugin:
    runs-on: ${{ matrix.os }}
    name: DragonBones (${{ matrix.platform }})
    continue-on-error: true  # Don't fail workflow if plugin build fails
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows
            os: windows-latest
          - platform: linux
            os: ubuntu-latest
          - platform: web
            os: ubuntu-latest
          - platform: android
            os: ubuntu-latest
    
    steps:
      - uses: actions/setup-python@v5
        with: {python-version: '3.x'}
      - run: python -m pip install scons

      # Windows setup
      - if: matrix.platform == 'windows'
        uses: ilammy/msvc-dev-cmd@v1

      # Linux setup
      - if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config \
            libx11-dev libxcursor-dev libxinerama-dev \
            libgl1-mesa-dev libglu-dev libasound2-dev

      # Web setup
      - if: matrix.platform == 'web'
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: '4.0.0'

      # Android setup
      - if: matrix.platform == 'android'
        name: Setup Android NDK
        run: |
          export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk
          export ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/23.2.8568313
          
          if [ ! -d "$ANDROID_NDK_ROOT" ]; then
            yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager \
              "ndk;23.2.8568313" || true
          fi
          
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          repository: Daylily-Zeleen/Godot-DragonBones
          ref: v${{ env.DRAGONBONES_VERSION }}
          submodules: recursive
          path: dragonbones

      - name: Update godot-cpp
        working-directory: dragonbones/godot-cpp
        shell: bash
        run: |
          git fetch --tags
          git checkout ${{ env.GODOT_TAG }} || echo "Using default"

      - name: Build Plugin (Official Method)
        working-directory: dragonbones
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" == "android" ]; then
            scons platform=${{ matrix.platform }} target=template_release arch=arm64v8 || exit 0
          else
            scons platform=${{ matrix.platform }} target=template_release || exit 0
          fi

      - name: Check Build Output
        working-directory: dragonbones/demo/addons/godot_dragon_bones.daylily-zeleen/bin
        shell: bash
        run: ls -lh || echo "No build output"

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dragonbones-plugin-${{ matrix.platform }}
          path: dragonbones/demo/addons/godot_dragon_bones.daylily-zeleen/
          if-no-files-found: warn

  #############################################
  # Job 7: Download Precompiled DragonBones (Fallback)
  #############################################
  download-dragonbones-precompiled:
    runs-on: ubuntu-latest
    name: Download Official DragonBones Plugin
    needs: build-dragonbones-plugin
    if: always()  # Run even if plugin build fails
    
    steps:
      - name: Download Official Precompiled Plugin
        run: |
          mkdir -p dragonbones-official
          cd dragonbones-official
          
          # Download all platform binaries
          wget -q https://github.com/Daylily-Zeleen/Godot-DragonBones/releases/download/v${{ env.DRAGONBONES_VERSION }}/godot-dragonbones-windows-${{ env.DRAGONBONES_VERSION }}.zip || true
          wget -q https://github.com/Daylily-Zeleen/Godot-DragonBones/releases/download/v${{ env.DRAGONBONES_VERSION }}/godot-dragonbones-linux-${{ env.DRAGONBONES_VERSION }}.zip || true
          wget -q https://github.com/Daylily-Zeleen/Godot-DragonBones/releases/download/v${{ env.DRAGONBONES_VERSION }}/godot-dragonbones-web-${{ env.DRAGONBONES_VERSION }}.zip || true
          wget -q https://github.com/Daylily-Zeleen/Godot-DragonBones/releases/download/v${{ env.DRAGONBONES_VERSION }}/godot-dragonbones-android-${{ env.DRAGONBONES_VERSION }}.zip || true
          
          # Extract all
          for file in *.zip; do
            [ -f "$file" ] && unzip -o "$file" || true
          done

      - uses: actions/upload-artifact@v4
        with:
          name: dragonbones-plugin-official-precompiled
          path: dragonbones-official/
          if-no-files-found: warn

  #############################################
  # Job 8: Package Everything
  #############################################
  package-release:
    runs-on: ubuntu-latest
    needs: 
      - build-godot-editor-windows
      - build-templates-windows
      - build-templates-linux
      - build-templates-web
      - build-templates-android
      - build-dragonbones-plugin
      - download-dragonbones-precompiled
    if: always()
    name: Package Complete Bundle
    
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Export Templates
        run: |
          mkdir -p export_templates/${{ env.GODOT_VERSION }}.stable
          find artifacts/godot-templates-* -type f -exec cp {} export_templates/${{ env.GODOT_VERSION }}.stable/ ; 2>/dev/null || true

      - name: Package Editor
        run: |
          cd artifacts/godot-editor-windows
          zip -r ../../godot-editor-windows-${{ env.GODOT_VERSION }}.zip .

      - name: Package Templates
        run: |
          cd export_templates
          zip -r ../godot-templates-${{ env.GODOT_VERSION }}.zip .

      - name: Merge DragonBones Plugin (Built + Precompiled)
        run: |
          mkdir -p dragonbones-final/addons
          
          # Copy built plugins if available
          for dir in artifacts/dragonbones-plugin-*; do
            [ -d "$dir" ] && cp -r "$dir"/* dragonbones-final/addons/ 2>/dev/null || true
          done
          
          # Fallback to official precompiled
          if [ -d "artifacts/dragonbones-plugin-official-precompiled" ]; then
            cp -r artifacts/dragonbones-plugin-official-precompiled/* dragonbones-final/addons/ 2>/dev/null || true
          fi
          
          cd dragonbones-final
          zip -r ../dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}-complete.zip .

      - name: Generate Checksums
        run: |
          sha256sum *.zip > checksums.txt

      - name: Create Release Notes
        run: |
          cat > RELEASE_NOTES.md << 'EOF'
          # 🎮 Complete Godot ${{ env.GODOT_VERSION }} Build Bundle
          
          **Build Date:** $(date -u +"%Y-%m-%d %H:%M UTC")  
          **Godot:** ${{ env.GODOT_VERSION }}  
          **DragonBones:** ${{ env.DRAGONBONES_VERSION }}  
          **Commit:** ${{ github.sha }}
          
          ## 📦 What's Included
          
          ### 1. Godot Editor (Windows)
          - File: `godot-editor-windows-${{ env.GODOT_VERSION }}.zip`
          - Optimized for speed, production build
          
          ### 2. Export Templates (All Platforms)
          - File: `godot-templates-${{ env.GODOT_VERSION }}.zip`
          - **Platforms:** Windows, Linux, Web, Android (ARM64)
          - **Modes:** Release + Debug
          - **Size:** ~50 MB (optimized with size_extra)
          
          ### 3. DragonBones Plugin (All Platforms)
          - File: `dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}-complete.zip`
          - Includes custom-built and/or official precompiled binaries
          - **Platforms:** Windows, Linux, Web, Android
          
          ## ⚡ Optimizations
          - `optimize=size_extra` for templates
          - `lto=full` (Link Time Optimization)
          - 3D disabled (2D-only builds)
          - Emscripten 4.0.0 for web
          - Android: swappy=no (no frame pacing dependency)
          
          ## 📥 Installation
          
          ### Editor
          ```
          unzip godot-editor-windows-${{ env.GODOT_VERSION }}.zip
          # Run: godot.windows.editor.x86_64.exe
          ```
          
          ### Templates
          ```
          # Windows:
          unzip godot-templates-${{ env.GODOT_VERSION }}.zip -d %APPDATA%Godotexport_templates${{ env.GODOT_VERSION }}.stable\
          
          # Linux:
          unzip godot-templates-${{ env.GODOT_VERSION }}.zip -d ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/
          ```
          
          ### DragonBones Plugin
          ```
          # In your game project:
          unzip dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}-complete.zip -d your-game/
          # Creates: addons/godot_dragon_bones.daylily-zeleen/
          # Enable in: Project → Project Settings → Plugins
          ```
          
          ## 🔍 Checksums (SHA256)
          ```
          $(cat checksums.txt)
          ```
          
          ## ℹ️ Build Info
          - Workflow Run: #${{ github.run_number }}
          - Triggered by: ${{ github.event_name }}
          EOF

      - uses: actions/upload-artifact@v4
        with:
          name: complete-release-bundle
          path: |
            godot-editor-windows-${{ env.GODOT_VERSION }}.zip
            godot-templates-${{ env.GODOT_VERSION }}.zip
            dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}-complete.zip
            checksums.txt
            RELEASE_NOTES.md

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.GODOT_VERSION }}-build${{ github.run_number }}
          name: "Godot ${{ env.GODOT_VERSION }} Complete Bundle"
          body_path: RELEASE_NOTES.md
          files: |
            godot-editor-windows-${{ env.GODOT_VERSION }}.zip
            godot-templates-${{ env.GODOT_VERSION }}.zip
            dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}-complete.zip
            checksums.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        run: |
          python -m pip install scons
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libx11-dev libxcursor-dev \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev \
            libudev-dev libxi-dev libxrandr-dev

      - name: Clone Godot
        uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TAG }}
          path: godot

      - name: Compile Linux Template (Release)
        working-directory: godot
        run: |
          scons platform=linuxbsd \
            target=template_release \
            optimize=size_extra \
            lto=full \
            debug_symbols=no \
            deprecated=no \
            disable_3d=yes \
            production=yes

      - name: Compile Linux Template (Debug)
        working-directory: godot
        run: |
          scons platform=linuxbsd \
            target=template_debug \
            optimize=size \
            debug_symbols=yes \
            deprecated=no \
            disable_3d=yes

      - name: Upload Linux Templates
        uses: actions/upload-artifact@v4
        with:
          name: godot-templates-linux
          path: godot/bin/godot.linuxbsd.template_*
          retention-days: 90

  #############################################
  # Job 4: Build Export Templates - Web (FIXED)
  #############################################
  build-templates-web:
    runs-on: ubuntu-latest
    name: Build Web Export Templates
    
    steps:
      - name: Set up Python + SCons
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - run: python -m pip install scons

      - name: Install Emscripten SDK (FIXED - Now 4.0.0)
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: '4.0.0'
          actions-cache-folder: 'emsdk-cache'

      - name: Verify Emscripten Version
        run: |
          emcc --version
          echo "Emscripten installed at: $(which emcc)"

      - name: Clone Godot
        uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TAG }}
          path: godot

      - name: Compile Web Template (Release)
        working-directory: godot
        run: |
          scons platform=web \
            target=template_release \
            optimize=size_extra \
            lto=full \
            debug_symbols=no \
            deprecated=no \
            disable_3d=yes \
            production=yes

      - name: Compile Web Template (Debug)
        working-directory: godot
        run: |
          scons platform=web \
            target=template_debug \
            optimize=size \
            debug_symbols=yes \
            deprecated=no \
            disable_3d=yes

      - name: Upload Web Templates
        uses: actions/upload-artifact@v4
        with:
          name: godot-templates-web
          path: godot/bin/godot.web.template_*
          retention-days: 90

  #############################################
  # Job 5: Build Export Templates - Android (FIXED)
  #############################################
  build-templates-android:
    runs-on: ubuntu-latest
    name: Build Android Export Templates
    
    steps:
      - name: Set up Python + SCons
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - run: python -m pip install scons

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Android SDK/NDK (FIXED)
        run: |
          mkdir -p $HOME/android-sdk
          cd $HOME/android-sdk
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip
          mkdir -p cmdline-tools/latest
          mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
          yes | cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/android-sdk --licenses || true
          cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/android-sdk \
            "ndk;23.2.8568313" \
            "cmake;3.22.1" \
            "build-tools;33.0.1" \
            "platforms;android-33"
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$HOME/android-sdk/ndk/23.2.8568313" >> $GITHUB_ENV

      - name: Clone Godot
        uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TAG }}
          path: godot

      - name: Compile Android Template ARM64 (Release) (FIXED - Added swappy=no)
        working-directory: godot
        run: |
          scons platform=android \
            target=template_release \
            arch=arm64v8 \
            optimize=size_extra \
            lto=thin \
            debug_symbols=no \
            deprecated=no \
            disable_3d=yes \
            production=yes \
            swappy=no

      - name: Compile Android Template ARM64 (Debug) (FIXED - Added swappy=no)
        working-directory: godot
        run: |
          scons platform=android \
            target=template_debug \
            arch=arm64v8 \
            optimize=size \
            debug_symbols=yes \
            deprecated=no \
            disable_3d=yes \
            swappy=no

      - name: Build Android APK
        working-directory: godot/platform/android/java
        run: |
          ./gradlew generateGodotTemplates

      - name: Upload Android Templates
        uses: actions/upload-artifact@v4
        with:
          name: godot-templates-android
          path: |
            godot/bin/android_*.apk
            godot/bin/godot.android.template_*
          retention-days: 90

  #############################################
  # Job 6: Build DragonBones Plugin (All Platforms)
  #############################################
  build-dragonbones-plugin:
    runs-on: ${{ matrix.os }}
    name: Build DragonBones Plugin (${{ matrix.platform }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows
            os: windows-latest
            scons_platform: windows
          - platform: linux
            os: ubuntu-latest
            scons_platform: linuxbsd
          - platform: web
            os: ubuntu-latest
            scons_platform: web
          - platform: android
            os: ubuntu-latest
            scons_platform: android
    
    steps:
      - name: Set up Python + SCons
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - run: python -m pip install scons

      - name: Set up MSVC (Windows only)
        if: matrix.platform == 'windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libx11-dev libxcursor-dev \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev

      - name: Install Emscripten (Web only) (FIXED - Now 4.0.0)
        if: matrix.platform == 'web'
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: '4.0.0'
          actions-cache-folder: 'emsdk-cache'

      - name: Install Android NDK (Android only)
        if: matrix.platform == 'android'
        run: |
          mkdir -p $HOME/android-sdk
          cd $HOME/android-sdk
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip
          mkdir -p cmdline-tools/latest
          mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
          yes | cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/android-sdk --licenses || true
          cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/android-sdk "ndk;23.2.8568313"
          echo "ANDROID_NDK_ROOT=$HOME/android-sdk/ndk/23.2.8568313" >> $GITHUB_ENV

      - name: Clone DragonBones Plugin
        uses: actions/checkout@v4
        with:
          repository: Daylily-Zeleen/Godot-DragonBones
          ref: v${{ env.DRAGONBONES_VERSION }}
          submodules: recursive
          path: dragonbones

      - name: Update godot-cpp to match Godot version
        working-directory: dragonbones/godot-cpp
        shell: bash
        run: |
          git fetch --tags
          git checkout ${{ env.GODOT_TAG }} || git checkout 4.5-stable || echo "Using default branch"

      - name: Compile DragonBones Plugin
        working-directory: dragonbones
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" == "windows" ]; then
            scons platform=${{ matrix.scons_platform }} \
              target=template_release \
              optimize=size \
              lto=thin \
              debug_symbols=no
          elif [ "${{ matrix.platform }}" == "android" ]; then
            scons platform=${{ matrix.scons_platform }} \
              target=template_release \
              arch=arm64v8 \
              optimize=size \
              lto=thin \
              debug_symbols=no
          else
            scons platform=${{ matrix.scons_platform }} \
              target=template_release \
              optimize=size \
              lto=thin \
              debug_symbols=no
          fi

      - name: Upload DragonBones Plugin
        uses: actions/upload-artifact@v4
        with:
          name: dragonbones-plugin-${{ matrix.platform }}
          path: dragonbones/demo/addons/godot_dragon_bones.daylily-zeleen/
          retention-days: 90

  #############################################
  # Job 7: Package Everything Into Release
  #############################################
  package-release:
    runs-on: ubuntu-latest
    needs: 
      - build-godot-editor-windows
      - build-templates-windows
      - build-templates-linux
      - build-templates-web
      - build-templates-android
      - build-dragonbones-plugin
    name: Package Complete Release Bundle
    
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Export Template Structure
        run: |
          mkdir -p export_templates/${{ env.GODOT_VERSION }}.stable
          
          # Copy all templates
          find artifacts/godot-templates-* -type f -exec cp {} export_templates/${{ env.GODOT_VERSION }}.stable/ ; || true

      - name: Package Godot Editor
        run: |
          cd artifacts/godot-editor-windows
          zip -r ../../godot-editor-windows-${{ env.GODOT_VERSION }}-custom.zip .
          cd ../..

      - name: Package Export Templates
        run: |
          cd export_templates
          zip -r ../godot-export-templates-${{ env.GODOT_VERSION }}-custom.zip .
          cd ..

      - name: Package DragonBones Plugin
        run: |
          mkdir -p dragonbones-complete/addons
          
          # Merge all platform binaries
          for dir in artifacts/dragonbones-plugin-*; do
            if [ -d "$dir" ]; then
              cp -r "$dir"/* dragonbones-complete/addons/ 2>/dev/null || true
            fi
          done
          
          cd dragonbones-complete
          zip -r ../dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}-all-platforms.zip .
          cd ..

      - name: Generate File Hashes
        run: |
          sha256sum godot-editor-windows-${{ env.GODOT_VERSION }}-custom.zip > checksums.txt
          sha256sum godot-export-templates-${{ env.GODOT_VERSION }}-custom.zip >> checksums.txt
          sha256sum dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}-all-platforms.zip >> checksums.txt

      - name: Create Release Notes
        run: |
          cat > RELEASE_NOTES.md << 'EOF'
          # Complete Godot Build Bundle
          
          ## 📦 Versions
          - **Godot:** ${{ env.GODOT_VERSION }}
          - **DragonBones Plugin:** ${{ env.DRAGONBONES_VERSION }}
          - **Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Commit:** ${{ github.sha }}
          
          ## 🎮 What's Included
          
          ### 1. Godot Editor (Windows x64)
          - **File:** `godot-editor-windows-${{ env.GODOT_VERSION }}-custom.zip`
          - **Size:** ~85 MB
          - Optimized for speed
          - Production build
          
          ### 2. Export Templates (All Platforms)
          - **File:** `godot-export-templates-${{ env.GODOT_VERSION }}-custom.zip`
          - **Platforms:**
            - Windows (x86_64): Release + Debug
            - Linux (x86_64): Release + Debug
            - Web (WASM): Release + Debug
            - Android (ARM64): Release + Debug
          
          ### 3. DragonBones Plugin (All Platforms)
          - **File:** `dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}-all-platforms.zip`
          - **Size:** ~15 MB
          - Windows, Linux, Web, Android binaries included
          
          ## ⚡ Optimizations Applied
          - `optimize=size_extra` for templates
          - `lto=full` (Link Time Optimization)
          - 3D features disabled (2D-only)
          - Deprecated features removed
          - Emscripten 4.0.0 for web builds
          
          ## 📥 Installation
          
          ### Godot Editor
          1. Extract `godot-editor-windows-*.zip`
          2. Run `godot.windows.editor.x86_64.exe`
          
          ### Export Templates
          1. Extract to: `%APPDATA%Godotexport_templates${{ env.GODOT_VERSION }}.stable`
          2. Restart Godot Editor
          
          ### DragonBones Plugin
          1. Extract to your project: `your-game/addons/`
          2. Enable in: Project → Project Settings → Plugins
          
          ## 🔍 Checksums
          ```
          $(cat checksums.txt)
          ```
          
          ## 🐛 Bug Fixes in This Build
          - Fixed Emscripten version error (now using 4.0.0)
          - Fixed Android Swappy dependency (disabled with swappy=no)
          - Improved Android SDK installation
          
          ## ℹ️ Build Information
          - Workflow: ${{ github.workflow }}
          - Run Number: ${{ github.run_number }}
          - Triggered by: ${{ github.event_name }}
          EOF

      - name: Upload Final Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: complete-release-bundle
          path: |
            godot-editor-windows-${{ env.GODOT_VERSION }}-custom.zip
            godot-export-templates-${{ env.GODOT_VERSION }}-custom.zip
            dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}-all-platforms.zip
            RELEASE_NOTES.md
            checksums.txt
          retention-days: 90

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.GODOT_VERSION }}-db${{ env.DRAGONBONES_VERSION }}-build${{ github.run_number }}
          name: "Godot ${{ env.GODOT_VERSION }} + DragonBones ${{ env.DRAGONBONES_VERSION }}"
          body_path: RELEASE_NOTES.md
          files: |
            godot-editor-windows-${{ env.GODOT_VERSION }}-custom.zip
            godot-export-templates-${{ env.GODOT_VERSION }}-custom.zip
            dragonbones-plugin-${{ env.DRAGONBONES_VERSION }}-all-platforms.zip
            checksums.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
